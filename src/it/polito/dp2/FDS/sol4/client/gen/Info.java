
package it.polito.dp2.FDS.sol4.client.gen;

import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.FaultAction;
import javax.xml.ws.Response;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Info", targetNamespace = "http://pad.polito.it/FDS")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Info {


    /**
     * 
     * 				This operation lets the user to get a single flight.
     * 			
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetFlightResponse>
     */
    @WebMethod(operationName = "getFlight")
    public Response<GetFlightResponse> getFlightAsync(
        @WebParam(name = "getFlight", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlight parameters);

    /**
     * 
     * 				This operation lets the user to get a single flight.
     * 			
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFlight")
    public Future<?> getFlightAsync(
        @WebParam(name = "getFlight", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlight parameters,
        @WebParam(name = "getFlightResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetFlightResponse> asyncHandler);

    /**
     * 
     * 				This operation lets the user to get a single flight.
     * 			
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetFlightResponse
     * @throws Monitor_Exception
     * @throws UnknownFlight_Exception
     * @throws InvalidArgument_Exception
     */
    @WebMethod
    @WebResult(name = "getFlightResponse", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getFlightRequest", output = "http://pad.polito.it/FDSInfo/Info/getFlightResponse", fault = {
        @FaultAction(className = UnknownFlight_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlight/Fault/UnknownFlight"),
        @FaultAction(className = InvalidArgument_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlight/Fault/InvalidArgument"),
        @FaultAction(className = Monitor_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlight/Fault/Monitor")
    })
    public GetFlightResponse getFlight(
        @WebParam(name = "getFlight", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlight parameters)
        throws InvalidArgument_Exception, Monitor_Exception, UnknownFlight_Exception
    ;

    /**
     * 
     * 				This operation lets the user to get the whole list of
     * 				the flights in the
     * 				database.
     * 			
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetFlightsResponse>
     */
    @WebMethod(operationName = "getFlights")
    public Response<GetFlightsResponse> getFlightsAsync(
        @WebParam(name = "getFlights", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlights parameters);

    /**
     * 
     * 				This operation lets the user to get the whole list of
     * 				the flights in the
     * 				database.
     * 			
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFlights")
    public Future<?> getFlightsAsync(
        @WebParam(name = "getFlights", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlights parameters,
        @WebParam(name = "getFlightsResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetFlightsResponse> asyncHandler);

    /**
     * 
     * 				This operation lets the user to get the whole list of
     * 				the flights in the
     * 				database.
     * 			
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetFlightsResponse
     * @throws Monitor_Exception
     * @throws InvalidArgument_Exception
     */
    @WebMethod
    @WebResult(name = "getFlightsResponse", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getFlightsRequest", output = "http://pad.polito.it/FDSInfo/Info/getFlightsResponse", fault = {
        @FaultAction(className = InvalidArgument_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlights/Fault/InvalidArgument"),
        @FaultAction(className = Monitor_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlights/Fault/Monitor")
    })
    public GetFlightsResponse getFlights(
        @WebParam(name = "getFlights", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlights parameters)
        throws InvalidArgument_Exception, Monitor_Exception
    ;

    /**
     * 
     * 				This operation lets the user to get a list of flights
     * 				with the same departure airport.
     * 			
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetFlightByDepartureAirportResponse>
     */
    @WebMethod(operationName = "getFlightByDepartureAirport")
    public Response<GetFlightByDepartureAirportResponse> getFlightByDepartureAirportAsync(
        @WebParam(name = "getFlightByDepartureAirport", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightByDepartureAirport parameters);

    /**
     * 
     * 				This operation lets the user to get a list of flights
     * 				with the same departure airport.
     * 			
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFlightByDepartureAirport")
    public Future<?> getFlightByDepartureAirportAsync(
        @WebParam(name = "getFlightByDepartureAirport", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightByDepartureAirport parameters,
        @WebParam(name = "getFlightByDepartureAirportResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetFlightByDepartureAirportResponse> asyncHandler);

    /**
     * 
     * 				This operation lets the user to get a list of flights
     * 				with the same departure airport.
     * 			
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetFlightByDepartureAirportResponse
     * @throws Monitor_Exception
     * @throws InvalidArgument_Exception
     */
    @WebMethod
    @WebResult(name = "getFlightByDepartureAirportResponse", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getFlightByDepartureAirportRequest", output = "http://pad.polito.it/FDSInfo/Info/getFlightByDepartureAirportResponse", fault = {
        @FaultAction(className = InvalidArgument_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightByDepartureAirport/Fault/InvalidArgument"),
        @FaultAction(className = Monitor_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightByDepartureAirport/Fault/Monitor")
    })
    public GetFlightByDepartureAirportResponse getFlightByDepartureAirport(
        @WebParam(name = "getFlightByDepartureAirport", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightByDepartureAirport parameters)
        throws InvalidArgument_Exception, Monitor_Exception
    ;

    /**
     * 
     * 				This operation lets the user to get a list of flights
     * 				with the same
     * 				destination airport.
     * 			
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetFlightByDestinationAirportResponse>
     */
    @WebMethod(operationName = "getFlightByDestinationAirport")
    public Response<GetFlightByDestinationAirportResponse> getFlightByDestinationAirportAsync(
        @WebParam(name = "getFlightByDestinationAirport", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightByDestinationAirport parameters);

    /**
     * 
     * 				This operation lets the user to get a list of flights
     * 				with the same
     * 				destination airport.
     * 			
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFlightByDestinationAirport")
    public Future<?> getFlightByDestinationAirportAsync(
        @WebParam(name = "getFlightByDestinationAirport", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightByDestinationAirport parameters,
        @WebParam(name = "getFlightByDestinationAirportResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetFlightByDestinationAirportResponse> asyncHandler);

    /**
     * 
     * 				This operation lets the user to get a list of flights
     * 				with the same
     * 				destination airport.
     * 			
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetFlightByDestinationAirportResponse
     * @throws Monitor_Exception
     * @throws InvalidArgument_Exception
     */
    @WebMethod
    @WebResult(name = "getFlightByDestinationAirportResponse", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getFlightByDestinationAirportRequest", output = "http://pad.polito.it/FDSInfo/Info/getFlightByDestinationAirportResponse", fault = {
        @FaultAction(className = InvalidArgument_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightByDestinationAirport/Fault/InvalidArgument"),
        @FaultAction(className = Monitor_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightByDestinationAirport/Fault/Monitor")
    })
    public GetFlightByDestinationAirportResponse getFlightByDestinationAirport(
        @WebParam(name = "getFlightByDestinationAirport", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightByDestinationAirport parameters)
        throws InvalidArgument_Exception, Monitor_Exception
    ;

    /**
     * 
     * 				This operation lets the user to get a single flight
     * 				instance.
     * 			
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetFlightInstanceResponse>
     */
    @WebMethod(operationName = "getFlightInstance")
    public Response<GetFlightInstanceResponse> getFlightInstanceAsync(
        @WebParam(name = "getFlightInstance", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightInstance parameters);

    /**
     * 
     * 				This operation lets the user to get a single flight
     * 				instance.
     * 			
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFlightInstance")
    public Future<?> getFlightInstanceAsync(
        @WebParam(name = "getFlightInstance", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightInstance parameters,
        @WebParam(name = "getFlightInstanceResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetFlightInstanceResponse> asyncHandler);

    /**
     * 
     * 				This operation lets the user to get a single flight
     * 				instance.
     * 			
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetFlightInstanceResponse
     * @throws Monitor_Exception
     * @throws UnknownFlightInstance_Exception
     * @throws InvalidArgument_Exception
     */
    @WebMethod
    @WebResult(name = "getFlightInstanceResponse", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getFlightInstanceRequest", output = "http://pad.polito.it/FDSInfo/Info/getFlightInstanceResponse", fault = {
        @FaultAction(className = UnknownFlightInstance_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstance/Fault/UnknownFlightInstance"),
        @FaultAction(className = InvalidArgument_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstance/Fault/InvalidArgument"),
        @FaultAction(className = Monitor_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstance/Fault/Monitor")
    })
    public GetFlightInstanceResponse getFlightInstance(
        @WebParam(name = "getFlightInstance", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightInstance parameters)
        throws InvalidArgument_Exception, Monitor_Exception, UnknownFlightInstance_Exception
    ;

    /**
     * 
     * 				This operation lets the user to get the whole list of
     * 				flight instances
     * 				in the database.
     * 			
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetFlightInstancesResponse>
     */
    @WebMethod(operationName = "getFlightInstances")
    public Response<GetFlightInstancesResponse> getFlightInstancesAsync(
        @WebParam(name = "getFlightInstances", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightInstances parameters);

    /**
     * 
     * 				This operation lets the user to get the whole list of
     * 				flight instances
     * 				in the database.
     * 			
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFlightInstances")
    public Future<?> getFlightInstancesAsync(
        @WebParam(name = "getFlightInstances", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightInstances parameters,
        @WebParam(name = "getFlightInstancesResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetFlightInstancesResponse> asyncHandler);

    /**
     * 
     * 				This operation lets the user to get the whole list of
     * 				flight instances
     * 				in the database.
     * 			
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetFlightInstancesResponse
     * @throws Monitor_Exception
     */
    @WebMethod
    @WebResult(name = "getFlightInstancesResponse", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getFlightInstancesRequest", output = "http://pad.polito.it/FDSInfo/Info/getFlightInstancesResponse", fault = {
        @FaultAction(className = Monitor_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstances/Fault/Monitor")
    })
    public GetFlightInstancesResponse getFlightInstances(
        @WebParam(name = "getFlightInstances", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightInstances parameters)
        throws Monitor_Exception
    ;

    /**
     * 
     * 				This operation lets the user to get a list of flight
     * 				instances with the same flight number.
     * 			
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetFlightInstancesByFlightIDResponse>
     */
    @WebMethod(operationName = "getFlightInstancesByFlightID")
    public Response<GetFlightInstancesByFlightIDResponse> getFlightInstancesByFlightIDAsync(
        @WebParam(name = "getFlightInstancesByFlightID", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightInstancesByFlightID parameters);

    /**
     * 
     * 				This operation lets the user to get a list of flight
     * 				instances with the same flight number.
     * 			
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFlightInstancesByFlightID")
    public Future<?> getFlightInstancesByFlightIDAsync(
        @WebParam(name = "getFlightInstancesByFlightID", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightInstancesByFlightID parameters,
        @WebParam(name = "getFlightInstancesByFlightIDResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetFlightInstancesByFlightIDResponse> asyncHandler);

    /**
     * 
     * 				This operation lets the user to get a list of flight
     * 				instances with the same flight number.
     * 			
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetFlightInstancesByFlightIDResponse
     * @throws Monitor_Exception
     * @throws UnknownFlightInstance_Exception
     * @throws InvalidArgument_Exception
     */
    @WebMethod
    @WebResult(name = "getFlightInstancesByFlightIDResponse", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getFlightInstancesByFlightIDRequest", output = "http://pad.polito.it/FDSInfo/Info/getFlightInstancesByFlightIDResponse", fault = {
        @FaultAction(className = UnknownFlightInstance_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstancesByFlightID/Fault/UnknownFlightInstance"),
        @FaultAction(className = InvalidArgument_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstancesByFlightID/Fault/InvalidArgument"),
        @FaultAction(className = Monitor_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstancesByFlightID/Fault/Monitor")
    })
    public GetFlightInstancesByFlightIDResponse getFlightInstancesByFlightID(
        @WebParam(name = "getFlightInstancesByFlightID", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightInstancesByFlightID parameters)
        throws InvalidArgument_Exception, Monitor_Exception, UnknownFlightInstance_Exception
    ;

    /**
     * 
     * 				This operation lets the user to get a list of flight
     * 				instances with the same flight instance status.
     * 			
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetFlightInstanceByStatusResponse>
     */
    @WebMethod(operationName = "getFlightInstanceByStatus")
    public Response<GetFlightInstanceByStatusResponse> getFlightInstanceByStatusAsync(
        @WebParam(name = "getFlightInstanceByStatus", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightInstanceByStatus parameters);

    /**
     * 
     * 				This operation lets the user to get a list of flight
     * 				instances with the same flight instance status.
     * 			
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFlightInstanceByStatus")
    public Future<?> getFlightInstanceByStatusAsync(
        @WebParam(name = "getFlightInstanceByStatus", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightInstanceByStatus parameters,
        @WebParam(name = "getFlightInstanceByStatusResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetFlightInstanceByStatusResponse> asyncHandler);

    /**
     * 
     * 				This operation lets the user to get a list of flight
     * 				instances with the same flight instance status.
     * 			
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetFlightInstanceByStatusResponse
     * @throws Monitor_Exception
     * @throws UnknownFlightInstance_Exception
     * @throws InvalidArgument_Exception
     */
    @WebMethod
    @WebResult(name = "getFlightInstanceByStatusResponse", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getFlightInstanceByStatusRequest", output = "http://pad.polito.it/FDSInfo/Info/getFlightInstanceByStatusResponse", fault = {
        @FaultAction(className = UnknownFlightInstance_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstanceByStatus/Fault/UnknownFlightInstance"),
        @FaultAction(className = InvalidArgument_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstanceByStatus/Fault/InvalidArgument"),
        @FaultAction(className = Monitor_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstanceByStatus/Fault/Monitor")
    })
    public GetFlightInstanceByStatusResponse getFlightInstanceByStatus(
        @WebParam(name = "getFlightInstanceByStatus", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightInstanceByStatus parameters)
        throws InvalidArgument_Exception, Monitor_Exception, UnknownFlightInstance_Exception
    ;

    /**
     * 
     * 				This operation lets the user to get a list of flight
     * 				instances with the same departure date.
     * 			
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetFlightInstanceByDepartureDateResponse>
     */
    @WebMethod(operationName = "getFlightInstanceByDepartureDate")
    public Response<GetFlightInstanceByDepartureDateResponse> getFlightInstanceByDepartureDateAsync(
        @WebParam(name = "getFlightInstanceByDepartureDate", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightInstanceByDepartureDate parameters);

    /**
     * 
     * 				This operation lets the user to get a list of flight
     * 				instances with the same departure date.
     * 			
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getFlightInstanceByDepartureDate")
    public Future<?> getFlightInstanceByDepartureDateAsync(
        @WebParam(name = "getFlightInstanceByDepartureDate", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightInstanceByDepartureDate parameters,
        @WebParam(name = "getFlightInstanceByDepartureDateResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetFlightInstanceByDepartureDateResponse> asyncHandler);

    /**
     * 
     * 				This operation lets the user to get a list of flight
     * 				instances with the same departure date.
     * 			
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetFlightInstanceByDepartureDateResponse
     * @throws Monitor_Exception
     * @throws UnknownFlightInstance_Exception
     * @throws InvalidArgument_Exception
     */
    @WebMethod
    @WebResult(name = "getFlightInstanceByDepartureDateResponse", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getFlightInstanceByDepartureDateRequest", output = "http://pad.polito.it/FDSInfo/Info/getFlightInstanceByDepartureDateResponse", fault = {
        @FaultAction(className = UnknownFlightInstance_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstanceByDepartureDate/Fault/UnknownFlightInstance"),
        @FaultAction(className = InvalidArgument_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstanceByDepartureDate/Fault/InvalidArgument"),
        @FaultAction(className = Monitor_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getFlightInstanceByDepartureDate/Fault/Monitor")
    })
    public GetFlightInstanceByDepartureDateResponse getFlightInstanceByDepartureDate(
        @WebParam(name = "getFlightInstanceByDepartureDate", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetFlightInstanceByDepartureDate parameters)
        throws InvalidArgument_Exception, Monitor_Exception, UnknownFlightInstance_Exception
    ;

    /**
     * 
     * 				This operation lets the user to get the whole list of
     * 				passengers in the database.
     * 			
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetPassengersResponse>
     */
    @WebMethod(operationName = "getPassengers")
    public Response<GetPassengersResponse> getPassengersAsync(
        @WebParam(name = "getPassengers", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetPassengers parameters);

    /**
     * 
     * 				This operation lets the user to get the whole list of
     * 				passengers in the database.
     * 			
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPassengers")
    public Future<?> getPassengersAsync(
        @WebParam(name = "getPassengers", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetPassengers parameters,
        @WebParam(name = "getPassengersResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetPassengersResponse> asyncHandler);

    /**
     * 
     * 				This operation lets the user to get the whole list of
     * 				passengers in the database.
     * 			
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetPassengersResponse
     * @throws Monitor_Exception
     * @throws InvalidArgument_Exception
     */
    @WebMethod
    @WebResult(name = "getPassengersResponse", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getPassengersRequest", output = "http://pad.polito.it/FDSInfo/Info/getPassengersResponse", fault = {
        @FaultAction(className = InvalidArgument_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getPassengers/Fault/InvalidArgument"),
        @FaultAction(className = Monitor_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getPassengers/Fault/Monitor")
    })
    public GetPassengersResponse getPassengers(
        @WebParam(name = "getPassengers", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetPassengers parameters)
        throws InvalidArgument_Exception, Monitor_Exception
    ;

    /**
     * 
     * 				This operation lets the user to get a list of
     * 				passengers which are checked in on flight instances with the same
     * 				flight number.
     * 			
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetPassengerByFlightIDResponse>
     */
    @WebMethod(operationName = "getPassengerByFlightID")
    public Response<GetPassengerByFlightIDResponse> getPassengerByFlightIDAsync(
        @WebParam(name = "getPassengerByFlightID", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetPassengerByFlightID parameters);

    /**
     * 
     * 				This operation lets the user to get a list of
     * 				passengers which are checked in on flight instances with the same
     * 				flight number.
     * 			
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPassengerByFlightID")
    public Future<?> getPassengerByFlightIDAsync(
        @WebParam(name = "getPassengerByFlightID", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetPassengerByFlightID parameters,
        @WebParam(name = "getPassengerByFlightIDResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetPassengerByFlightIDResponse> asyncHandler);

    /**
     * 
     * 				This operation lets the user to get a list of
     * 				passengers which are checked in on flight instances with the same
     * 				flight number.
     * 			
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetPassengerByFlightIDResponse
     * @throws Monitor_Exception
     * @throws UnknownFlightInstance_Exception
     * @throws InvalidArgument_Exception
     */
    @WebMethod
    @WebResult(name = "getPassengerByFlightIDResponse", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getPassengerByFlightIDRequest", output = "http://pad.polito.it/FDSInfo/Info/getPassengerByFlightIDResponse", fault = {
        @FaultAction(className = UnknownFlightInstance_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getPassengerByFlightID/Fault/UnknownFlightInstance"),
        @FaultAction(className = InvalidArgument_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getPassengerByFlightID/Fault/InvalidArgument"),
        @FaultAction(className = Monitor_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getPassengerByFlightID/Fault/Monitor")
    })
    public GetPassengerByFlightIDResponse getPassengerByFlightID(
        @WebParam(name = "getPassengerByFlightID", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetPassengerByFlightID parameters)
        throws InvalidArgument_Exception, Monitor_Exception, UnknownFlightInstance_Exception
    ;

    /**
     * 
     * 				This operation lets the user to get a list of
     * 				passengers instances with a name that starts with the specified
     * 				prefix.
     * 			
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetPassengerByPrefixResponse>
     */
    @WebMethod(operationName = "getPassengerByPrefix")
    public Response<GetPassengerByPrefixResponse> getPassengerByPrefixAsync(
        @WebParam(name = "getPassengerByPrefix", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetPassengerByPrefix parameters);

    /**
     * 
     * 				This operation lets the user to get a list of
     * 				passengers instances with a name that starts with the specified
     * 				prefix.
     * 			
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPassengerByPrefix")
    public Future<?> getPassengerByPrefixAsync(
        @WebParam(name = "getPassengerByPrefix", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetPassengerByPrefix parameters,
        @WebParam(name = "getPassengerByPrefixResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetPassengerByPrefixResponse> asyncHandler);

    /**
     * 
     * 				This operation lets the user to get a list of
     * 				passengers instances with a name that starts with the specified
     * 				prefix.
     * 			
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetPassengerByPrefixResponse
     * @throws Monitor_Exception
     * @throws UnknownFlightInstance_Exception
     * @throws InvalidArgument_Exception
     */
    @WebMethod
    @WebResult(name = "getPassengerByPrefixResponse", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getPassengerByPrefixRequest", output = "http://pad.polito.it/FDSInfo/Info/getPassengerByPrefixResponse", fault = {
        @FaultAction(className = UnknownFlightInstance_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getPassengerByPrefix/Fault/UnknownFlightInstance"),
        @FaultAction(className = InvalidArgument_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getPassengerByPrefix/Fault/InvalidArgument"),
        @FaultAction(className = Monitor_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getPassengerByPrefix/Fault/Monitor")
    })
    public GetPassengerByPrefixResponse getPassengerByPrefix(
        @WebParam(name = "getPassengerByPrefix", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetPassengerByPrefix parameters)
        throws InvalidArgument_Exception, Monitor_Exception, UnknownFlightInstance_Exception
    ;

    /**
     * 
     * 				This operation lets the user to get a list of
     * 				passengers which are checked in on flight instances that has the
     * 				same departure date.
     * 			
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetPassengerByDepartureDateResponse>
     */
    @WebMethod(operationName = "getPassengerByDepartureDate")
    public Response<GetPassengerByDepartureDateResponse> getPassengerByDepartureDateAsync(
        @WebParam(name = "getPassengerByDepartureDate", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetPassengerByDepartureDate parameters);

    /**
     * 
     * 				This operation lets the user to get a list of
     * 				passengers which are checked in on flight instances that has the
     * 				same departure date.
     * 			
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getPassengerByDepartureDate")
    public Future<?> getPassengerByDepartureDateAsync(
        @WebParam(name = "getPassengerByDepartureDate", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetPassengerByDepartureDate parameters,
        @WebParam(name = "getPassengerByDepartureDateResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetPassengerByDepartureDateResponse> asyncHandler);

    /**
     * 
     * 				This operation lets the user to get a list of
     * 				passengers which are checked in on flight instances that has the
     * 				same departure date.
     * 			
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetPassengerByDepartureDateResponse
     * @throws Monitor_Exception
     * @throws UnknownFlightInstance_Exception
     * @throws InvalidArgument_Exception
     */
    @WebMethod
    @WebResult(name = "getPassengerByDepartureDateResponse", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getPassengerByDepartureDateRequest", output = "http://pad.polito.it/FDSInfo/Info/getPassengerByDepartureDateResponse", fault = {
        @FaultAction(className = UnknownFlightInstance_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getPassengerByDepartureDate/Fault/UnknownFlightInstance"),
        @FaultAction(className = InvalidArgument_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getPassengerByDepartureDate/Fault/InvalidArgument"),
        @FaultAction(className = Monitor_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getPassengerByDepartureDate/Fault/Monitor")
    })
    public GetPassengerByDepartureDateResponse getPassengerByDepartureDate(
        @WebParam(name = "getPassengerByDepartureDate", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetPassengerByDepartureDate parameters)
        throws InvalidArgument_Exception, Monitor_Exception, UnknownFlightInstance_Exception
    ;

    /**
     * 
     * 				This operation lets the user to get the whole list of
     * 				the aircrafts in the database.
     * 			
     * 
     * @param parameters
     * @return
     *     returns javax.xml.ws.Response<it.polito.dp2.FDS.sol4.client.gen.GetAircraftsResponse>
     */
    @WebMethod(operationName = "getAircrafts")
    public Response<GetAircraftsResponse> getAircraftsAsync(
        @WebParam(name = "getAircrafts", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetAircrafts parameters);

    /**
     * 
     * 				This operation lets the user to get the whole list of
     * 				the aircrafts in the database.
     * 			
     * 
     * @param asyncHandler
     * @param parameters
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAircrafts")
    public Future<?> getAircraftsAsync(
        @WebParam(name = "getAircrafts", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetAircrafts parameters,
        @WebParam(name = "getAircraftsResponse", targetNamespace = "", partName = "asyncHandler")
        AsyncHandler<GetAircraftsResponse> asyncHandler);

    /**
     * 
     * 				This operation lets the user to get the whole list of
     * 				the aircrafts in the database.
     * 			
     * 
     * @param parameters
     * @return
     *     returns it.polito.dp2.FDS.sol4.client.gen.GetAircraftsResponse
     * @throws Monitor_Exception
     */
    @WebMethod
    @WebResult(name = "getAircraftsResponse", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
    @Action(input = "http://pad.polito.it/FDSInfo/Info/getAircraftsRequest", output = "http://pad.polito.it/FDSInfo/Info/getAircraftsResponse", fault = {
        @FaultAction(className = Monitor_Exception.class, value = "http://pad.polito.it/FDSInfo/Info/getAircrafts/Fault/Monitor")
    })
    public GetAircraftsResponse getAircrafts(
        @WebParam(name = "getAircrafts", targetNamespace = "http://pad.polito.it/FDS", partName = "parameters")
        GetAircrafts parameters)
        throws Monitor_Exception
    ;

}
